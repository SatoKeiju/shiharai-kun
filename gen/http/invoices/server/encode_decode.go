// Code generated by goa v3.19.1, DO NOT EDIT.
//
// invoices HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/SatoKeiju/shiharai-kun/design

package server

import (
	"context"
	"errors"
	"net/http"

	invoices "github.com/SatoKeiju/shiharai-kun/gen/invoices"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeFetchResponse returns an encoder for responses returned by the
// invoices fetch endpoint.
func EncodeFetchResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]*invoices.Invoice)
		enc := encoder(ctx, w)
		body := NewFetchResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeFetchRequest returns a decoder for requests sent to the invoices fetch
// endpoint.
func DecodeFetchRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			userID string
			err    error
		)
		userID = r.URL.Query().Get("user-id")
		if userID == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("user-id", "query string"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewFetchPayload(userID)

		return payload, nil
	}
}

// EncodeFetchError returns an encoder for errors returned by the fetch
// invoices endpoint.
func EncodeFetchError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "bad_request":
			var res *invoices.ErrBadRequest
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/vnd.err.bad_request")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewFetchBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "internal_server_error":
			var res *invoices.ErrInternalServerError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/vnd.err.internal_server_error")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewFetchInternalServerErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalInvoicesInvoiceToInvoiceResponse builds a value of type
// *InvoiceResponse from a value of type *invoices.Invoice.
func marshalInvoicesInvoiceToInvoiceResponse(v *invoices.Invoice) *InvoiceResponse {
	res := &InvoiceResponse{
		IssueDate:          v.IssueDate,
		PaymentAmount:      v.PaymentAmount,
		Commission:         v.Commission,
		CommissionRate:     v.CommissionRate,
		ConsumptionTax:     v.ConsumptionTax,
		ConsumptionTaxRate: v.ConsumptionTaxRate,
		BillingAmount:      v.BillingAmount,
		PaymentDueDate:     v.PaymentDueDate,
		Status:             v.Status,
	}

	return res
}
