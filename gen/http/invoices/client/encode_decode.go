// Code generated by goa v3.19.1, DO NOT EDIT.
//
// invoices HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/SatoKeiju/shiharai-kun/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	invoices "github.com/SatoKeiju/shiharai-kun/gen/invoices"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildFetchRequest instantiates a HTTP request object with method and path
// set to call the "invoices" service "fetch" endpoint
func (c *Client) BuildFetchRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: FetchInvoicesPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("invoices", "fetch", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeFetchRequest returns an encoder for requests sent to the invoices
// fetch server.
func EncodeFetchRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*invoices.FetchPayload)
		if !ok {
			return goahttp.ErrInvalidType("invoices", "fetch", "*invoices.FetchPayload", v)
		}
		values := req.URL.Query()
		values.Add("user-id", p.UserID)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeFetchResponse returns a decoder for responses returned by the invoices
// fetch endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeFetchResponse may return the following errors:
//   - "bad_request" (type *invoices.ErrBadRequest): http.StatusBadRequest
//   - "internal_server_error" (type *invoices.ErrInternalServerError): http.StatusInternalServerError
//   - error: internal error
func DecodeFetchResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body FetchResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("invoices", "fetch", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateInvoiceResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("invoices", "fetch", err)
			}
			res := NewFetchInvoiceOK(body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body FetchBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("invoices", "fetch", err)
			}
			err = ValidateFetchBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("invoices", "fetch", err)
			}
			return nil, NewFetchBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body FetchInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("invoices", "fetch", err)
			}
			err = ValidateFetchInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("invoices", "fetch", err)
			}
			return nil, NewFetchInternalServerError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("invoices", "fetch", resp.StatusCode, string(body))
		}
	}
}

// unmarshalInvoiceResponseToInvoicesInvoice builds a value of type
// *invoices.Invoice from a value of type *InvoiceResponse.
func unmarshalInvoiceResponseToInvoicesInvoice(v *InvoiceResponse) *invoices.Invoice {
	res := &invoices.Invoice{
		IssueDate:          *v.IssueDate,
		PaymentAmount:      *v.PaymentAmount,
		Commission:         *v.Commission,
		CommissionRate:     *v.CommissionRate,
		ConsumptionTax:     *v.ConsumptionTax,
		ConsumptionTaxRate: *v.ConsumptionTaxRate,
		BillingAmount:      *v.BillingAmount,
		PaymentDueDate:     *v.PaymentDueDate,
		Status:             *v.Status,
	}

	return res
}
