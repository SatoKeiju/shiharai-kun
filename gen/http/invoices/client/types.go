// Code generated by goa v3.19.1, DO NOT EDIT.
//
// invoices HTTP client types
//
// Command:
// $ goa gen github.com/SatoKeiju/shiharai-kun/design

package client

import (
	invoices "github.com/SatoKeiju/shiharai-kun/gen/invoices"
	goa "goa.design/goa/v3/pkg"
)

// FetchResponseBody is the type of the "invoices" service "fetch" endpoint
// HTTP response body.
type FetchResponseBody []*InvoiceResponse

// FetchBadRequestResponseBody is the type of the "invoices" service "fetch"
// endpoint HTTP response body for the "bad_request" error.
type FetchBadRequestResponseBody struct {
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// FetchInternalServerErrorResponseBody is the type of the "invoices" service
// "fetch" endpoint HTTP response body for the "internal_server_error" error.
type FetchInternalServerErrorResponseBody struct {
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// InvoiceResponse is used to define fields on response body types.
type InvoiceResponse struct {
	// 発行日
	IssueDate *string `form:"issue_date,omitempty" json:"issue_date,omitempty" xml:"issue_date,omitempty"`
	// 支払金額
	PaymentAmount *int `form:"payment_amount,omitempty" json:"payment_amount,omitempty" xml:"payment_amount,omitempty"`
	// 手数料
	Commission *int `form:"commission,omitempty" json:"commission,omitempty" xml:"commission,omitempty"`
	// 手数料率
	CommissionRate *float64 `form:"commission_rate,omitempty" json:"commission_rate,omitempty" xml:"commission_rate,omitempty"`
	// 消費税
	ConsumptionTax *int `form:"consumption_tax,omitempty" json:"consumption_tax,omitempty" xml:"consumption_tax,omitempty"`
	// 消費税率
	ConsumptionTaxRate *float64 `form:"consumption_tax_rate,omitempty" json:"consumption_tax_rate,omitempty" xml:"consumption_tax_rate,omitempty"`
	// 請求金額
	BillingAmount *int `form:"billing_amount,omitempty" json:"billing_amount,omitempty" xml:"billing_amount,omitempty"`
	// 支払期日
	PaymentDueDate *string `form:"payment_due_date,omitempty" json:"payment_due_date,omitempty" xml:"payment_due_date,omitempty"`
	// ステータス
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// NewFetchInvoiceOK builds a "invoices" service "fetch" endpoint result from a
// HTTP "OK" response.
func NewFetchInvoiceOK(body []*InvoiceResponse) []*invoices.Invoice {
	v := make([]*invoices.Invoice, len(body))
	for i, val := range body {
		v[i] = unmarshalInvoiceResponseToInvoicesInvoice(val)
	}

	return v
}

// NewFetchBadRequest builds a invoices service fetch endpoint bad_request
// error.
func NewFetchBadRequest(body *FetchBadRequestResponseBody) *invoices.ErrBadRequest {
	v := &invoices.ErrBadRequest{
		Message: *body.Message,
	}

	return v
}

// NewFetchInternalServerError builds a invoices service fetch endpoint
// internal_server_error error.
func NewFetchInternalServerError(body *FetchInternalServerErrorResponseBody) *invoices.ErrInternalServerError {
	v := &invoices.ErrInternalServerError{
		Message: *body.Message,
	}

	return v
}

// ValidateFetchBadRequestResponseBody runs the validations defined on
// fetch_bad_request_response_body
func ValidateFetchBadRequestResponseBody(body *FetchBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateFetchInternalServerErrorResponseBody runs the validations defined on
// fetch_internal_server_error_response_body
func ValidateFetchInternalServerErrorResponseBody(body *FetchInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateInvoiceResponse runs the validations defined on invoiceResponse
func ValidateInvoiceResponse(body *InvoiceResponse) (err error) {
	if body.IssueDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("issue_date", "body"))
	}
	if body.PaymentAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("payment_amount", "body"))
	}
	if body.Commission == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("commission", "body"))
	}
	if body.CommissionRate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("commission_rate", "body"))
	}
	if body.ConsumptionTax == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("consumption_tax", "body"))
	}
	if body.ConsumptionTaxRate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("consumption_tax_rate", "body"))
	}
	if body.BillingAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("billing_amount", "body"))
	}
	if body.PaymentDueDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("payment_due_date", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.PaymentAmount != nil {
		if *body.PaymentAmount < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.payment_amount", *body.PaymentAmount, 1, true))
		}
	}
	if body.Commission != nil {
		if *body.Commission < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.commission", *body.Commission, 0, true))
		}
	}
	if body.CommissionRate != nil {
		if *body.CommissionRate < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.commission_rate", *body.CommissionRate, 0, true))
		}
	}
	if body.ConsumptionTax != nil {
		if *body.ConsumptionTax < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.consumption_tax", *body.ConsumptionTax, 0, true))
		}
	}
	if body.ConsumptionTaxRate != nil {
		if *body.ConsumptionTaxRate < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.consumption_tax_rate", *body.ConsumptionTaxRate, 0, true))
		}
	}
	if body.BillingAmount != nil {
		if *body.BillingAmount < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.billing_amount", *body.BillingAmount, 1, true))
		}
	}
	if body.Status != nil {
		if !(*body.Status == "未処理" || *body.Status == "処理中" || *body.Status == "支払い済み" || *body.Status == "エラー") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"未処理", "処理中", "支払い済み", "エラー"}))
		}
	}
	return
}
